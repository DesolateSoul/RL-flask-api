import io
import imageio
from sqlalchemy.orm import relationship, sessionmaker
from datetime import datetime
from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Float, LargeBinary, create_engine
from sqlalchemy.ext.declarative import declarative_base

# Базовый класс для моделей
Base = declarative_base()


class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String(50), unique=True, nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    password_hash = Column(String(255), nullable=False)
    role = Column(String(20), default='user')  # 'user' или 'admin'
    created_at = Column(DateTime, default=datetime.utcnow)

    videos = relationship("Video", back_populates="user")

    def __repr__(self):
        return f"<User(id={self.id}, username='{self.username}')>"


class Video(Base):
    __tablename__ = 'videos'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    title = Column(String(100))
    description = Column(Text)

    # Видео данные
    video_data = Column(LargeBinary)
    thumbnail_data = Column(LargeBinary)

    # Метаданные
    duration = Column(Float)
    format = Column(String(10))
    resolution = Column(String(20))
    fps = Column(Integer)

    # RL метаданные
    env_name = Column(String(50))
    env_params = Column(Text)

    # Системная информация
    status = Column(String(20), default='completed')
    created_at = Column(DateTime, default=datetime.utcnow)

    # Добавляем связь с пользователем
    user = relationship("User", back_populates="videos")

    def __repr__(self):
        return f"<Video(id={self.id}, title='{self.title}')>"


def init_db(db_url: str = "sqlite:///app.db") -> sessionmaker:
    """
    Инициализирует базу данных и возвращает сессию.

    :param db_url: URL базы данных (по умолчанию SQLite)
    :return: Фабрика сессий
    """
    engine = create_engine(db_url)
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    return Session


def save_video_to_db(frames, fps=30, user_id=None, title="RL Model Video",
                     description="Video generated by reinforcement learning model",
                     env_name='LunarLander-v3', env_params=None):
    """
    Сохраняет видео в базу данных как бинарные данные

    :param frames: Список кадров видео (numpy arrays)
    :param fps: Кадров в секунду
    :param user_id: ID пользователя, создавшего видео
    :param title: Заголовок видео
    :param description: Описание видео
    :param env_name: Название среды RL
    :param env_params: Параметры среды
    :return: ID созданной записи видео
    """
    Session = init_db()
    # Конвертируем кадры в MP4 в памяти
    with io.BytesIO() as video_buffer:
        imageio.mimsave(video_buffer, frames, format='mp4', fps=fps)
        video_bytes = video_buffer.getvalue()

    # Создаем миниатюру (первый кадр)
    thumbnail_bytes = None
    if frames:
        thumbnail = frames[0]
        with io.BytesIO() as thumb_buffer:
            imageio.imwrite(thumb_buffer, thumbnail, format='jpeg')
            thumbnail_bytes = thumb_buffer.getvalue()

    # Сохраняем в базу данных
    session = Session()

    try:
        new_video = Video(
            user_id=user_id,
            title=title,
            description=description,
            video_data=video_bytes,
            thumbnail_data=thumbnail_bytes,
            duration=len(frames) / fps,
            format='mp4',
            resolution=f"{frames[0].shape[1]}x{frames[0].shape[0]}" if frames else '0x0',
            status='completed',
            created_at=datetime.utcnow(),
            env_name=env_name,
            env_params=str(env_params) if env_params else None
        )

        session.add(new_video)
        session.commit()
        return new_video.id
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()
