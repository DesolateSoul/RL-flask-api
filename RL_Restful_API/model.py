import random
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import gymnasium as gym
import imageio
from database import save_video_to_db


class Network(nn.Module):

    def __init__(self, state_size, action_size, seed=42):
        super(Network, self).__init__()
        self.seed = torch.manual_seed(seed)
        self.fc1 = nn.Linear(state_size, 64)
        self.fc2 = nn.Linear(64, 64)
        self.fc3 = nn.Linear(64, action_size)

    def forward(self, state):
        x = self.fc1(state)
        x = F.relu(x)
        x = self.fc2(x)
        x = F.relu(x)
        return self.fc3(x)


# Гиперпараметры модели
learning_rate = 5e-4
minibatch_size = 100
discount_factor = 0.99
replay_buffer_size = int(1e5)
interpolation_parameter = 1e-3


# Реализация памяти
class ReplayMemory(object):

    def __init__(self, capacity):
        self.device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
        self.capacity = capacity
        self.memory = []

    def push(self, event):
        self.memory.append(event)
        if len(self.memory) > self.capacity:
            del self.memory[0]

    def sample(self, batch_size):
        experiences = random.sample(self.memory, k=batch_size)
        states = torch.from_numpy(np.vstack([e[0] for e in experiences if e is not None])).float().to(self.device)
        actions = torch.from_numpy(np.vstack([e[1] for e in experiences if e is not None])).long().to(self.device)
        rewards = torch.from_numpy(np.vstack([e[2] for e in experiences if e is not None])).float().to(self.device)
        next_states = torch.from_numpy(np.vstack([e[3] for e in experiences if e is not None])).float().to(self.device)
        dones = torch.from_numpy(np.vstack([e[4] for e in experiences if e is not None]).astype(np.uint8)).float().to(
            self.device)
        return states, next_states, actions, rewards, dones


def save_video_of_model(agent, env_name='LunarLander-v3', gravity=-10.0,
                        enable_wind=False, wind_power=15.0, turbulence_power=1.5,
                        user_id=None, save_to_db=True):
    """
    Генерирует и сохраняет видео работы модели

    :param agent: Агент RL
    :param env_name: Название среды
    :param gravity: Параметр гравитации
    :param enable_wind: Включить ветер
    :param wind_power: Сила ветра
    :param turbulence_power: Турбулентность
    :param user_id: ID пользователя для сохранения в БД
    :param save_to_db: Флаг сохранения в БД (False - сохранит в файл)
    :return: При save_to_db=True возвращает ID видео, иначе None
    """
    env = gym.make(env_name, render_mode='rgb_array', gravity=gravity,
                   enable_wind=enable_wind, wind_power=wind_power,
                   turbulence_power=turbulence_power)
    state, _ = env.reset()
    done = False
    frames = []

    env_params = {
        'gravity': gravity,
        'enable_wind': enable_wind,
        'wind_power': wind_power,
        'turbulence_power': turbulence_power
    }

    while not done:
        frame = env.render()
        frames.append(frame)
        action = agent.act(state)
        state, reward, done, _, _ = env.step(action.item())
        if len(frames) > 600:  # Ограничение на длину видео
            done = True

    env.close()

    if save_to_db:
        return save_video_to_db(
            frames=frames,
            fps=30,
            user_id=user_id,
            title=f"RL {env_name} Video",
            description=f"Video generated by RL model in {env_name} environment",
            env_name=env_name,
            env_params=env_params
        )
    else:
        # Альтернатива: сохранение в файл
        imageio.mimsave('video.mp4', frames, fps=30)
        return None
